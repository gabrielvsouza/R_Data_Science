
Three general guiding principles that motivate what we learn here are 
1 be systematic when organizing your file system
2 automize when possible
3 minimize the use of the mouse.

As you become more proficient at coding, and you will find that 
1 you want to minimize the time you spend remembering what you call something or where you put it.
2 if you find yourself repeating the same task over and over,there's probably a way to automize it.
3 times your fingers leave the keyboard,

it results in loss of productivity.
A typical data analysis challenge may involve several parts,
each involving several data files, including files containing
the scripts we use to analyze data.

Keeping all this organized can be challenging.
We will learn to use the Unix shell as a tool for managing files
and folders on your computer system.
Using Unix will permit you to use the keyboard, rather than the mouse, when
creating folders, moving from folder to folder,
and renaming, deleting, or moving files.

We also provide specific suggestions on how to keep the file system organized.
The data analysis process is iterative and adaptive.
As a result, we are constantly editing our scripts and reports.

Git, is a powerful tool for keeping track of these changes.
We also introduced you to GitHub, a service that permits
you to host and share your code.
We will also demonstrate how you can use this service
to facilitate collaborations.
Note that a side effect of using Github
is that you can easily showcase your work to potential employers.

Finally, we learned to write reports in R markdown, which
permits you to incorporate text and code into a single document.
We will demonstrate how using the knitr package we can write reproducible
and aesthetically pleasing reports by running the analysis
and generating the report simultaneously.




Git is what we refer to as a version control system.

https://rafalab.github.io/dsbook/git.html#github-repos

Git is a version control system, tracking changes and coordinating the editing of code.
GitHub is a hosting system for code, which can help with your career profile.
Git is most effectively used with Unix, but can also work with Rstudio.

sudo apt install git

Sign up for a GitHub account, with a name that is professional, short, and easy to remember
Connect to RStudio: global options > Git/SVM, enter the path to git executables
To avoid typing our GitHub password every time, we create a SSHRSA key automatically through RStudio with 
the create RSA key button.

To create a new GitHub repository and link it to an RStudio project, follow 2 steps:
Step 1: Initialize a new repo on GitHub by clicking repository > new > choose a descriptive name.
Step 2: Connect to RStudio (next video).

One of the advantages of keeping code on a GitHub repository is that you can easily share it with potential employers.
Because many data science companies use version control systems like Git to collaborate on projects, they might also
be impressed that you already know at least the basics.

The first step in creating a repo for your code
is to initialize one on GitHub.
Because you already created an account, you can go to the URL,
GitHub.com/yourusername.

You now have your first repo on GitHub.
Now we're going to connect it to RStudio.
So to do this, it is convenient to copy the link provided
by GitHub specifically to connect this repo using Git.

In terminal: config git 
git config --global user.name "Your Name"
git config --global user.mail "your@email.com"

In RStudio, create project > Version control > Git
Git pane: status symbols and color
Git actions:
pull: pull changes from remote repo (if you are in collaboration with others)
add: stage files for commit; click on stage box under git pane
commit: commit to the local repo; click on "commit" button under git pane; add a commit message
push: push to the remote repo on Github
.gitignore file: details check https://git-scm.com/docs/gitignore


If git config --global user.email "you@domain.com"
git config --global user.name "github_username"
Dont work like in my case, you can use:
git config --replace-all user.email "you@domain.com"
git config --replace-all user.name "github_username"



Organizing with Unix
https://rafalab.github.io/dsbook/unix.html


The Unix section discusses the basics of managing your filesystem from the terminal with Unix commands such as mv and rm. 

Command Description
Examples

ls List directory content

mkdir dir Make a directory
mkdir projects –make the directory projects
mkdir docs –make the directory docs
mkdir junk –make the directory junk

rmdir dir Remove a directory (directory must be empty; otherwise use “rm”)
rmdir junk –remove the directory junk

cd dir Change directory
cd /projects – move to the projects directory (an absolute path)
cd projects – move to the projects directory, assuming we are already in the home directory (a relative path)

cd .. Go up one directory to the parent directory
cd ../.. – move up two parent directories from our current directory

cd ~ Go to the home directory

cd - Go to whatever directory you just left

pwd Print the present working directory

Tab key Autocomplete
cd d + tab – autocompletes to docs if it is the only directory that begins with d; or list the different options.

mv file1 file2 Move or rename files
Warning –this is permanent, and you will not get a warning message if you are overwriting files.
mv ~/docs/resumes/cv.tex ~/docs/reports/ –move the cv.tex file from the resume folder to the reports folder
mv cv.tex resume.tex – rename cv.tex to resume.tex
mv ~/docs/resumes ~ /docs/reports/ - move the resume folder into the reports folder

cp file1 file2 Copy file1 to file2
cp ~ ~/docs/reports/ – make a copy of the cv.tex file from the resume folder in the reports folder

rm file Delete file
Warning – this is permanent! You cannot retrieve files from the recycling bin!
rm ~/docs/resumes/cv.tex – delete the file cv.tex

less file View file
less ~/docs/resumes/cv.tex –open cv.tex in the less text viewer

rm -r dir Remove recursively all folders in directory dir and the directory itself.

ls -a List all directory content, including hidden files

ls -l List all directory content in long form (including permissions, size and date)

ls -t List all directory content in chronological order
ls -lart – show more information for all files in reverse chronological order for your current directory

man command Show the manual for the command. Note – this does not work for GitBash
man ls – show the manual instructions for the command ls.

help Show the manual for the command in GitBash
ls --help – show help instructions for the command ls

command1 | command2 Pipe the results of command 1 to command 2
man ls | less – show the help instructions for the command ls in the less viewer

* (wildcard) 
ls *.html –list all the files ending in html in your current directory
rm *.html – remove all files ending in html in your current directory

? (any character)
rm file.???.html – remove all files whose names follow the pattern; eg file-001.html, file-002.html etc.
rm file.???.* – remove all files whose names follow the pattern regardless of their extension; eg file-001.html, file-002.csv, file-any.R, etc.

$va >$ identifies a variable
echo $HOME – print your home directory
echo $SHELL – print your shell name

export val=value Change the value of the variable val (Bash shell specific)

open file (mac)file (windows) Opens a file or program
open Report.Rmd – open Report.Rmd in RStudio



Absolute path vs. relative path
A full path specifies the location of a file from the root directory. It is independent of your present directory, and must begin with either a “/” or a “~”. In this example, the full path to our “project-1” file is: 

/home/projects/project-1

A relative path is the path relative to your present working directory. If our present working directory is the “projects” folder, then the relative path to our “project-1” file is simply: 

project-1

Path shortcuts
One period “.” is your current working directory

Two periods “..” is the parent directory (up one from your present working directory) 

A tilde   “~” is your home directory.

More path examples
1.     Your current working directory is ~/projects and you want to move to the figs directory in the project-1 folder

Solution 2: cd ~/projects/project-1/figs (absolute)
Solution 2:  cd project-1/figs (relative)
2.     Your current working directory is ~/projects and you want to move to the reports folder in the docs directory

Solution 1: cd ~/dos/reports (absolute)
Solution 2: cd ../docs/reports (relative)
3.     Your current working directory is ~/projects/project-1/figs and you want to move to the project-2 folder in the projects directory.

Solution 1: cd ~/projects/project-2 (absolute)
Solution 2: cd ../../project-2 (relative)


Organizing with Unix
https://rafalab.github.io/dsbook/unix.html


The Terminal
The terminal helps to organize files in the system.
On Mac, use utilities > terminal.
On windows, use Git bash program.
Use the keyboard to navigate the command line.
Code: 
echo "hello world"


The Filesystem
We refer to all the files, folders, and programs (executables) on your computer as the filesystem.
Your filesystem is organized as a series of nested folders each containing files, folders, and executables. (see the visualization in the textbook)
In Unix, folders are referred to as directories and directories that are inside other directories are often referred to as subdirectories. 
The home directory is where all your stuff is kept.  There is a hierarchical nature to the file system.
https://www.codecademy.com/learn/learn-the-command-line


Working Directory
The working directory is the current location.
Each terminal window has a working directory associated with it.
The "pwd" command will display your working directory. The "/" symbol separates directories, while the first "/" at the beginning of the path stands for the root directory. When a path starts with "/", it is a "full path", which finds the current directory from the root directory. "Relative path" will be introduced soon.
"~" means the home directory
###

Unix Commands
From the command line, you can navigate through files and folders on your computer:
pwd   outputs the name of the current working directory.
ls    lists all files and directories in the working directory.
cd    switches you into the directory you specify.
mkdir creates a new directory in the working directory.
touch creates a new file inside the working directory.

navigate the file system with commands introduced in this video.
Auto-complete paths, commands and file names with the "Tab" key.
Code
ls #list dir content
mkdir folder_name #create directory called "folder_name"
rmdir folder_name  #remove an empty directory as long as it is empty
rm -r folder_name  #remove dir that is not empty, "r" stands for recursive
cd: change dir
../ # two dots represents parent dir
. # single dot represents current workingdir 
cd ~/projects # concatenate with forward slashes
cd ../.. # change to two parent layer beyond
cd -  # whatever dir you were before
cd  # return to the home dir

ls command has several more options. Here are three common options:
-a - lists all contents, including hidden files and directories
-l - lists all contents of a directory in long format
-t - order files and directories by the time they were last modified.
###

Moving and Removing Files
mv and rm: Moving and Removing Files
The mv command moves files.
[warning] mv will not ask you to confirm the move, and it could potentially overwrite a file.
The rm command removes files.
[warning] rm is permanent, which is different than throwing a folder in the trash.

Code
mv path-to-file path-to-destination-directory
rm filename-1 filename-2 filename-3

Options modify the behavior of commands:
ls -a lists all contents of a directory, including hidden files and directories
ls -l lists all contents in long format
ls -t orders files and directories by the time they were last modified

Multiple options can be used together, like ls -alt
From the command line, you can also copy, move, and remove files and directories:
cp copies files
mv moves and renames files
rm removes files
rm -r removes directories

Wildcards are useful for selecting groups of files and directories

less: Looking at a File
less allows you to quickly look at the content of a file
Use q to exit the less page
use the arrows to navigate in the less page
Code
less cv.tex
###


Preparing for a Data Science Project
Ideally, files (code, data, output) should be structured and self-contained
In a project, we prefer using relative paths (path relative to the default working directory) instead of the full path so that code can run smoothly on other individual's computers.
It is good practice to write a README.txt file to introduce the file structure to facilitate collaboration and for your future reference.

Code
########### In terminal ###########
cd ~ # move to home directory
mkdir projects # make a new directory called projects
cd projects # move to ~/projects directory
mkdir murders # make new directory called murders inside of projects
cd murders # move to ~/projects/murders/
mkdir data rda # make two new directories, one is data the other is rda folder
ls # to check if we indeed have one data folder and one rda folder
pwd # check the current working directory
mkdir figs # make a directory called figs to store figures
########## In RStudio ########
# pick existing directory as new projects
getwd() # to confirm current working directory
save() # save into .rda file, .RData is also fine but less prefered
ggsave("figs/barplot.png") # save a plot generated by ggplot2 to a dir called "figs"


















