
Three general guiding principles that motivate what we learn here are 
1 be systematic when organizing your file system
2 automize when possible
3 minimize the use of the mouse.

As you become more proficient at coding, and you will find that 
1 you want to minimize the time you spend remembering what you call something or where you put it.
2 if you find yourself repeating the same task over and over,there's probably a way to automize it.
3 times your fingers leave the keyboard,

it results in loss of productivity.
A typical data analysis challenge may involve several parts,
each involving several data files, including files containing
the scripts we use to analyze data.

Keeping all this organized can be challenging.
We will learn to use the Unix shell as a tool for managing files
and folders on your computer system.
Using Unix will permit you to use the keyboard, rather than the mouse, when
creating folders, moving from folder to folder,
and renaming, deleting, or moving files.

We also provide specific suggestions on how to keep the file system organized.
The data analysis process is iterative and adaptive.
As a result, we are constantly editing our scripts and reports.

Git, is a powerful tool for keeping track of these changes.
We also introduced you to GitHub, a service that permits
you to host and share your code.
We will also demonstrate how you can use this service
to facilitate collaborations.
Note that a side effect of using Github
is that you can easily showcase your work to potential employers.

Finally, we learned to write reports in R markdown, which
permits you to incorporate text and code into a single document.
We will demonstrate how using the knitr package we can write reproducible
and aesthetically pleasing reports by running the analysis
and generating the report simultaneously.




Git is what we refer to as a version control system.

https://rafalab.github.io/dsbook/git.html#github-repos

Git is a version control system, tracking changes and coordinating the editing of code.
GitHub is a hosting system for code, which can help with your career profile.
Git is most effectively used with Unix, but can also work with Rstudio.

sudo apt install git

Sign up for a GitHub account, with a name that is professional, short, and easy to remember
Connect to RStudio: global options > Git/SVM, enter the path to git executables
To avoid typing our GitHub password every time, we create a SSHRSA key automatically through RStudio with 
the create RSA key button.

To create a new GitHub repository and link it to an RStudio project, follow 2 steps:
Step 1: Initialize a new repo on GitHub by clicking repository > new > choose a descriptive name.
Step 2: Connect to RStudio (next video).

One of the advantages of keeping code on a GitHub repository is that you can easily share it with potential employers.
Because many data science companies use version control systems like Git to collaborate on projects, they might also
be impressed that you already know at least the basics.

The first step in creating a repo for your code
is to initialize one on GitHub.
Because you already created an account, you can go to the URL,
GitHub.com/yourusername.

You now have your first repo on GitHub.
Now we're going to connect it to RStudio.
So to do this, it is convenient to copy the link provided
by GitHub specifically to connect this repo using Git.

In terminal: config git 
git config --global user.name "Your Name"
git config --global user.mail "your@email.com"

In RStudio, create project > Version control > Git
Git pane: status symbols and color
Git actions:
pull: pull changes from remote repo (if you are in collaboration with others)
add: stage files for commit; click on stage box under git pane
commit: commit to the local repo; click on "commit" button under git pane; add a commit message
push: push to the remote repo on Github
.gitignore file: details check https://git-scm.com/docs/gitignore


















































