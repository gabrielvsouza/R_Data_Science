#The apply family

# lapply()
#   apply function over list or vector
#   output = list
# sapply()
#   apply function over list or vector
#   try to simplify list to array
# vapply()
#   apply function over list or vector
#   explicitly specify output format

#lapply 
# built-in R function
# The vector pioneers has already been created for you
pioneers <- c("GAUSS:1777", "BAYES:1702", "PASCAL:1623", "PEARSON:1857")
# Split names from birth year
split_math <- strsplit(pioneers, split = ":")
split_math
# Convert to lowercase strings: split_low
split_low <- lapply(split_math, tolower)
split_low
# Take a look at the structure of split_low
str(split_low)
#
#with your own function
# Code from previous exercise:
pioneers <- c("GAUSS:1777", "BAYES:1702", "PASCAL:1623", "PEARSON:1857")
split <- strsplit(pioneers, split = ":")
split_low <- lapply(split, tolower)
# Write function select_first()
select_first <- function(x) {
  x[1]
}
# Apply select_first() over split_low: names
names <- lapply(split_low, select_first)
# Write function select_second()
select_second <- function(y) {
  y[2]
}
#
#anonymous functions
# split_low has been created for you
split_low
# Transform: use anonymous function inside lapply
lapply(split_low, function(x) {x[1]})
# Transform: use anonymous function inside lapply
lapply(split_low, function(x) {x[2]})
#
# with additional arguments
# Definition of split_low
pioneers <- c("GAUSS:1777", "BAYES:1702", "PASCAL:1623", "PEARSON:1857")
split <- strsplit(pioneers, split = ":")
split_low <- lapply(split, tolower)
# Generic select function
select_el <- function(x, index) {
  x[index]
}
# Use lapply() twice on split_low: names and years
names <- lapply(split_low, select_el, index=1)
years <- lapply(split_low, select_el, index=2)
#
#Apply functions that return NULL
lapply(list(1, "a", TRUE), str)
#
lapply(split_low, function(x) {
  if (nchar(x[1]) > 5) {
    return(NULL)
  } else {
    return(x[2])
  }
})


# sapply
#Apply function over list or vector
#Function can return R objects of different classes
#List necessary to store heterogeneous content
#However, o"en homogeneous content
#How to use sapply
temp <- list(c(3,  7,  9,  6, -1), c(6,  9, 12, 13,  5), c(4,  8,  3, -1, -3), c(1,  4,  7,  2, -2), 
             c(5, 7, 9, 4, 2), c(-3,  5,  8,  9,  4), c( 3, 6, 9, 4, 1))
# temp has already been defined in the workspace
temp
# Use lapply() to find each day's minimum temperature
sapply(temp, min)
# Use sapply() to find each day's minimum temperature
sapply(temp, max)
# Use lapply() to find each day's maximum temperature
lapply(temp, min)
# Use sapply() to find each day's maximum temperature
lapply(temp, max)

# sapply with your own function
# Finish function definition of extremes_avg
extremes_avg <- function(x) {
  ( min(x) + max(x) ) / 2
}
# Apply extremes_avg() over temp using sapply()
sapply(temp, extremes_avg)
# Apply extremes_avg() over temp using lapply()
lapply(temp, extremes_avg)
#
#sapply with function returning vector
# Create a function that returns min and max of a vector: extremes
extremes <- function(x) {
  c(min = min(x), max= max(x))
}
# Apply extremes() over temp with sapply()
sapply(temp, extremes)
# Apply extremes() over temp with lapply()
lapply(temp, extremes)
#
#sapply can't simplify, now what?
# Definition of below_zero()
below_zero <- function(x) {
  return(x[x < 0])
}
# Apply below_zero over temp using sapply(): freezing_s
freezing_s <- sapply(temp, below_zero)
freezing_s
# Apply below_zero over temp using lapply(): freezing_l
freezing_l <- lapply(temp, below_zero)
freezing_l
# Are freezing_s and freezing_l identical?
identical(freezing_s, freezing_l)
#
# with functions that return NULL
# Definition of print_info()
print_info <- function(x) {
  cat("The average temperature is", mean(x), "\n")
}
# Apply print_info() over temp using sapply()
sapply(temp, print_info)
# Apply print_info() over temp using lapply()
lapply(temp, print_info)
#
#Reverse engineering sapply
#This code generates a matrix with 3 rows and 2 columns.
#The function that is used inside sapply() is anonymous.
sapply(list(runif (10), runif (10)), 
       function(x) c(min = min(x), mean = mean(x), max = max(x)))


#vapply

# Definition of basics()
basics <- function(x) {
  c(min = min(x), mean = mean(x), max = max(x))
}
# Apply basics() over temp using vapply()
sapply(temp, basics)
vapply(temp, basics, numeric(3))
#
# Definition of the basics() function
basics <- function(x) {
  c(min = min(x), mean = mean(x), median = median(x), max = max(x))
}
# Fix the error:
vapply(temp, basics, numeric(4))
#
#From sapply to vapply
# Convert to vapply() expression
sapply(temp, max)
vapply(temp, max, numeric(1))
# Convert to vapply() expression
sapply(temp, function(x, y) { mean(x) > y }, y = 5)
vapply(temp, function(x, y) { mean(x) > y }, y = 5, logical(1))


#
# Regular Expressions
#Sequence of (meta)characters
#Pattern existence
#Pattern replacement
#Pattern extraction
#grep(), grepl()
#sub(), gsub()
#
#grepl & grep
# The emails vector has already been defined for you
emails <- c("john.doe@ivyleague.edu", "education@world.gov", "dalai.lama@peace.org",
            "invalid.edu", "quant@bigdatacollege.edu", "cookie.monster@sesame.tv")
emails
# Use grepl() to match for "edu"
grepl(pattern = "edu", x = emails)
grepl("edu", emails)
# Use grep() to match for "edu", save result to hits
hits <- grep(pattern = "edu", x = emails)
hits2 <- grep("edu", emails)
# Subset emails using hits
emails[hits]
emails[hits2]
#
# caret, ^, and the dollar sign, $ to match the content located in the start 
# and end of a string, respectively.
# @, because a valid email must contain an at-sign.
# .*, which matches any character (.) zero or more times (*). 
# Both the dot and the asterisk are metacharacters. You can use them to match 
# any character between the at-sign and the ".edu" portion of an email address.
# \\.edu$, to match the ".edu" part of the email at the end of the string. 
# The \\ part escapes the dot: it tells R that you want to use 
# the . as an actual character.
# Use grepl() to match for .edu addresses more robustly
# The emails vector has already been defined for you
emails <- c("john.doe@ivyleague.edu", "education@world.gov", "dalai.lama@peace.org",
            "invalid.edu", "quant@bigdatacollege.edu", "cookie.monster@sesame.tv")
emails
# Use grepl() to match for .edu addresses more robustly
grepl("@.*\\.edu", emails)
# Use grep() to match for .edu addresses more robustly, save result to hits
hits <- grep("@.*\\.edu", emails)
hits
# Subset emails using hits
emails[hits]


#
#sub & gsub
# The emails vector has already been defined for you
emails <- c("john.doe@ivyleague.edu", "education@world.gov", "global@peace.org",
            "invalid.edu", "quant@bigdatacollege.edu", "cookie.monster@sesame.tv")
emails
# Use sub() to convert the email domains to datacamp.edu
sub("@.*\\.edu$", "@datacamp.edu", emails)
#
#Regular expressions
#   .*: A usual suspect! It can be read as "any character that is matched zero or more times".
#   \\s: Match a space. The "s" is normally a character, escaping it (\\) makes it a metacharacter.
#   [0-9]+: Match the numbers 0 to 9, at least once (+)
#   ([0-9]+): The parentheses are used to make parts of the matching string available to define the replacement
#   \\1 in the replacement argument of sub() gets set to the string that is captured by the regular expression [0-9]+
#
awards <- c("Won 1 Oscar.",
            "Won 1 Oscar. Another 9 wins & 24 nominations.",
            "1 win and 2 nominations.",
            "2 wins & 3 nominations.",
            "Nominated for 2 Golden Globes. 1 more win & 2 nominations.",
            "4 wins & 1 nomination.")

sub(".*\\s([0-9]+)\\snomination.*$", "\\1", awards)


#Right here, right now
# dates are represented by Date objects, 
# while times are represented by POSIXct objects
#
# Get the current date: today
today <- Sys.Date()
today
# See what today looks like under the hood
unclass(today)
# Get the current time: now
now <- Sys.time()
now
# See what now looks like under the hood
unclass(now)
#
#Create and format dates
# %Y: 4-digit year (1982)
# %y: 2-digit year (82)
# %m: 2-digit month (01)
# %d: 2-digit day of the month (13
# %A: weekday (Wednesday)
# %a: abbreviated weekday (Wed)
# %B: month (January)
# %b: abbreviated month (Jan)
# 
#  R matches your character string to the formats "%Y-%m-%d" or "%Y/%m/%d"
#
as.Date("1982-01-13")
as.Date("Jan-13-82", format = "%b-%d-%y")
as.Date("13 January, 1982", format = "%d %B, %Y")
#
today <- Sys.Date()
format(Sys.Date(), format = "%d %B, %Y")
format(Sys.Date(), format = "Today is a %A!")
#
# Definition of character strings representing dates
str1 <- "May 23, '96"
str2 <- "2012-03-15"
str3 <- "30/January/2006"
# Convert the strings to dates: date1, date2, date3
date1 <- as.Date(str1, format = "%b %d, '%y")
date2 <- as.Date(str2)
date3 <- as.Date(str3, format = "%d/%B/%Y")
date1
date2
date3
# Convert dates to formatted strings
format(date1, "%A")
format(date2, format = "%d")
format(date3, format = "%b %Y")

#
#Create and format times
#  use as.POSIXct() to convert from a character string to a POSIXct object, 
#and format() to convert from a POSIXct object to a character string
# %H: hours as a decimal number (00-23)
# %I: hours as a decimal number (01-12)
# %M: minutes as a decimal number
# %S: seconds as a decimal number
# %T: shorthand notation for the typical format %H:%M:%S
# %p: AM/PM indicator
#
# as.POSIXct() uses a default format to match character strings. 
# In this case, it's %Y-%m-%d %H:%M:%S
#
# Definition of character strings representing dates
str1 <- "May 23, '96"
str2 <- "2012-03-15"
str3 <- "30/January/2006"
# Convert the strings to dates: date1, date2, date3
date1 <- as.Date(str1, format = "%b %d, '%y")
date2 <- as.Date(str2)
date3 <- as.Date(str3, format = "%d/%B/%Y")
date1
date2
date3
# Convert dates to formatted strings
format(date1, "%A")
format(date2, format = "%d")
format(date3, format = "%b %Y")

# Calculations with Dates
today <- Sys.Date()
today + 1
today - 1
as.Date("2015-03-12") - as.Date("2015-02-27")

# day1, day2, day3, day4 and day5 are already available in the workspace
day1
#[1] "2019-05-02"
day2
#[1] "2019-05-04"
day3
#[1] "2019-05-09"
day4
#[1] "2019-05-15"
day5
#[1] "2019-05-20"
# Difference between last and first pizza day
day5 - day1
# Create vector pizza
pizza <- c(day1, day2, day3, day4, day5)
pizza
# Create differences between consecutive pizza days: day_diff
day_diff <- diff(pizza)
# Average period between two consecutive pizza days
mean(day_diff)

# login and logout are already defined in the workspace
now <- Sys.time()
now + 3600          # add an hour
now - 3600 * 24     # subtract a day

birth <- as.POSIXct("1879-03-14 14:37:23")
death <- as.POSIXct("1955-04-18 03:47:12")
einstein <- death - birth
einstein

# login and logout are already defined in the workspace
login
#[1] "2019-05-06 10:18:04 UTC" "2019-05-11 09:14:18 UTC"
#[3] "2019-05-11 12:21:51 UTC" "2019-05-11 12:37:24 UTC"
#[5] "2019-05-13 21:37:55 UTC"
logout
#[1] "2019-05-06 10:56:29 UTC" "2019-05-11 09:14:52 UTC"
#[3] "2019-05-11 12:35:48 UTC" "2019-05-11 13:17:22 UTC"
#[5] "2019-05-13 22:08:47 UTC"
# Calculate the difference between login and logout: time_online
time_online <- logout - login
time_online
# Inspect the variable time_online
unclass(time_online)
# Calculate the total time online
sum(time_online)
# Calculate the average time online
mean(time_online)



# Convert astro to vector of Date objects: astro_dates
astro_dates <- as.Date(astro, format = "%d-%b-%Y")
# Convert meteo to vector of Date objects: meteo_dates
meteo_dates <- as.Date(meteo, format = "%B %d, %y" )
# Calculate the maximum absolute difference between astro_dates and meteo_dates
max(abs(astro_dates - meteo_dates))

































